{ parameter
    (or (or (or %checkerEntrypoint
               (or %lazyParams
                  (or (or (or (or (pair %activate_burrow nat nat)
                                  (pair %add_liquidity (pair nat nat) nat timestamp))
                              (or (pair %burn_kit nat nat) (pair %buy_kit (pair nat nat) timestamp)))
                          (or (or (nat %cancel_liquidation_slice)
                                  (pair %create_burrow (pair nat (option key_hash)) nat))
                              (or (pair %deactivate_burrow nat address) (pair %deposit_collateral nat nat))))
                      (or (or (or (nat %liquidation_auction_claim_win)
                                  (pair %liquidation_auction_place_bid nat nat))
                              (or (pair %mark_for_liquidation address nat) (pair %mint_kit nat nat)))
                          (or (or (pair %receive_ctez_marginal_price nat nat) (pair %receive_price nat nat))
                              (or (pair %remove_liquidity (pair nat nat) nat timestamp)
                                  (pair %sell_kit (pair nat nat) timestamp)))))
                  (or (or (or (pair %set_burrow_delegate nat (option key_hash)) (unit %touch))
                          (or (pair %touch_burrow address nat) (list %touch_liquidation_slices nat)))
                      (or (list %update_operators
                             (or (pair %add_operator (address %owner) (address %operator) (nat %token_id))
                                 (pair %remove_operator (address %owner) (address %operator) (nat %token_id))))
                          (pair %withdraw_collateral nat nat))))
               (or %strictParams
                  (pair %balance_of
                     (list %requests (pair (address %owner) (nat %token_id)))
                     (contract %callback
                        (list (pair (pair %request (address %owner) (nat %token_id)) (nat %balance)))))
                  (list %transfer
                     (pair (address %from_) (list %txs (pair (address %to_) (nat %token_id) (nat %amount)))))))
            (pair %deployFunction int bytes))
        (or (bytes %deployMetadata)
            (pair %sealContract
               (pair (address %collateral_fa2) (address %ctez_cfmm))
               (address %ctok_fa2)
               (address %oracle)))) ;
  storage
    (pair (big_map %lazy_functions int bytes)
          (big_map %metadata string bytes)
          (or %deployment_state
             (pair %sealed
                (pair (pair (big_map %burrows
                               (pair address nat)
                               (pair (pair (pair (bool %active) (address %address))
                                           (int %adjustment_index)
                                           (nat %collateral))
                                     (pair (nat %collateral_at_auction) (timestamp %last_checker_timestamp))
                                     (nat %outstanding_kit)))
                            (pair %cfmm
                               (pair (pair (nat %ctok) (nat %kit))
                                     (pair %kit_in_ctok_in_prev_block (int %den) (int %num))
                                     (nat %last_level))
                               (nat %lqt)))
                      (pair %external_contracts
                         (pair (address %collateral_fa2) (address %ctez_cfmm))
                         (address %ctok_fa2)
                         (address %oracle))
                      (pair %fa2_state
                         (big_map %ledger (pair nat address) nat)
                         (big_map %operators (pair (pair address address) nat) unit)))
                (pair (option %last_ctez_in_tez (pair (int %den) (int %num))) (option %last_index int))
                (pair %liquidation_auctions
                   (pair (pair (pair %avl_storage
                                  (nat %last_ptr)
                                  (big_map %mem
                                     nat
                                     (or (or (pair %branch
                                                (pair (pair (nat %left) (nat %left_height)) (nat %left_tok) (nat %parent))
                                                (pair (nat %right) (nat %right_height))
                                                (nat %right_tok))
                                             (pair %leaf
                                                (nat %parent)
                                                (pair %value
                                                   (pair (pair %contents
                                                            (pair (pair %burrow address nat) (option %min_kit_for_unwarranted nat))
                                                            (nat %tok))
                                                         (option %older nat))
                                                   (option %younger nat))))
                                         (pair %root
                                            (option nat)
                                            (option
                                               (pair (pair (option %older_auction nat) (nat %sold_tok))
                                                     (pair %winning_bid (address %address) (nat %kit))
                                                     (option %younger_auction nat)))))))
                               (big_map %burrow_slices
                                  (pair address nat)
                                  (pair (nat %oldest_slice) (nat %youngest_slice))))
                         (option %completed_auctions (pair (nat %oldest) (nat %youngest)))
                         (option %current_auction
                            (pair (nat %contents)
                                  (or %state
                                     (pair %ascending (pair (pair (address %address) (nat %kit)) timestamp) nat)
                                     (pair %descending nat timestamp)))))
                   (nat %queued_slices))
                (pair %parameters
                   (pair (pair (pair (int %burrow_fee_index) (nat %circulating_kit))
                               (int %drift)
                               (int %drift_derivative))
                         (pair (int %imbalance_index) (int %index))
                         (timestamp %last_touched)
                         (nat %outstanding_kit))
                   (pair (int %protected_index) (int %q))
                   (int %target)))
             (address %unsealed))) ;
  code { NONE (pair (pair (option nat) nat) (pair address nat) (option nat)) ;
         NONE nat ;
         PAIR ;
         RIGHT
           (or (pair (pair (pair nat nat) nat nat) (pair nat nat) nat)
               (pair nat
                     (pair (pair (pair (pair (pair address nat) (option nat)) nat) (option nat)) (option nat)))) ;
         EMPTY_BIG_MAP
           nat
           (or (or (pair (pair (pair nat nat) nat nat) (pair nat nat) nat)
                   (pair nat
                         (pair (pair (pair (pair (pair address nat) (option nat)) nat) (option nat)) (option nat))))
               (pair (option nat) (option (pair (pair (option nat) nat) (pair address nat) (option nat))))) ;
         PUSH nat 0 ;
         PUSH nat 1 ;
         ADD ;
         DUP ;
         DIG 2 ;
         DIG 3 ;
         SOME ;
         DUP 4 ;
         UPDATE ;
         DIG 2 ;
         PAIR ;
         PAIR ;
         PUSH int 18446744073709551616 ;
         PUSH int 18446744073709551616 ;
         PUSH int 18446744073709551616 ;
         PAIR ;
         PAIR ;
         PUSH nat 0 ;
         NOW ;
         PAIR ;
         PUSH int 18446744073709551616 ;
         PUSH int 18446744073709551616 ;
         PAIR ;
         PAIR ;
         PUSH int 0 ;
         PUSH int 0 ;
         PAIR ;
         PUSH nat 0 ;
         PUSH int 18446744073709551616 ;
         PAIR ;
         PAIR ;
         PAIR ;
         PAIR ;
         DIG 2 ;
         UNPAIR ;
         PUSH mutez 0 ;
         AMOUNT ;
         COMPARE ;
         NEQ ;
         IF { PUSH int 83 ; FAILWITH } {} ;
         SWAP ;
         UNPAIR 3 ;
         DIG 2 ;
         IF_LEFT
           { DIG 4 ;
             DIG 5 ;
             DROP 2 ;
             DIG 3 ;
             IF_LEFT
               { IF_LEFT
                   { IF_LEFT
                       { IF_LEFT
                           { IF_LEFT
                               { IF_LEFT
                                   { IF_LEFT
                                       { IF_LEFT { PACK ; PUSH int 6 } { PACK ; PUSH int 15 } }
                                       { IF_LEFT { PACK ; PUSH int 5 } { PACK ; PUSH int 13 } } }
                                   { IF_LEFT
                                       { IF_LEFT { PACK ; PUSH int 10 } { PACK ; PUSH int 1 } }
                                       { IF_LEFT { PACK ; PUSH int 7 } { PACK ; PUSH int 2 } } } }
                               { IF_LEFT
                                   { IF_LEFT
                                       { IF_LEFT { PACK ; PUSH int 18 } { PACK ; PUSH int 17 } }
                                       { IF_LEFT { PACK ; PUSH int 8 } { PACK ; PUSH int 4 } } }
                                   { IF_LEFT
                                       { IF_LEFT { PACK ; PUSH int 20 } { PACK ; PUSH int 19 } }
                                       { IF_LEFT { PACK ; PUSH int 16 } { PACK ; PUSH int 14 } } } } }
                           { IF_LEFT
                               { IF_LEFT
                                   { IF_LEFT { PACK ; PUSH int 12 } { PACK ; PUSH int 0 } }
                                   { IF_LEFT { PACK ; PUSH int 11 } { PACK ; PUSH int 9 } } }
                               { IF_LEFT { PACK ; PUSH int 21 } { PACK ; PUSH int 3 } } } ;
                         SWAP ;
                         DIG 2 ;
                         PAIR ;
                         DUP 3 ;
                         DIG 2 ;
                         GET ;
                         IF_NONE
                           { PUSH int 151 ; FAILWITH }
                           { UNPACK
                               (lambda
                                  (pair (pair (pair (pair (big_map %burrows
                                                             (pair address nat)
                                                             (pair (pair (pair (bool %active) (address %address))
                                                                         (int %adjustment_index)
                                                                         (nat %collateral))
                                                                   (pair (nat %collateral_at_auction) (timestamp %last_checker_timestamp))
                                                                   (nat %outstanding_kit)))
                                                          (pair %cfmm
                                                             (pair (pair (nat %ctok) (nat %kit))
                                                                   (pair %kit_in_ctok_in_prev_block (int %den) (int %num))
                                                                   (nat %last_level))
                                                             (nat %lqt)))
                                                    (pair %external_contracts
                                                       (pair (address %collateral_fa2) (address %ctez_cfmm))
                                                       (address %ctok_fa2)
                                                       (address %oracle))
                                                    (pair %fa2_state
                                                       (big_map %ledger (pair nat address) nat)
                                                       (big_map %operators (pair (pair address address) nat) unit)))
                                              (pair (option %last_ctez_in_tez (pair (int %den) (int %num))) (option %last_index int))
                                              (pair %liquidation_auctions
                                                 (pair (pair (pair %avl_storage
                                                                (nat %last_ptr)
                                                                (big_map %mem
                                                                   nat
                                                                   (or (or (pair %branch
                                                                              (pair (pair (nat %left) (nat %left_height)) (nat %left_tok) (nat %parent))
                                                                              (pair (nat %right) (nat %right_height))
                                                                              (nat %right_tok))
                                                                           (pair %leaf
                                                                              (nat %parent)
                                                                              (pair %value
                                                                                 (pair (pair %contents
                                                                                          (pair (pair %burrow address nat) (option %min_kit_for_unwarranted nat))
                                                                                          (nat %tok))
                                                                                       (option %older nat))
                                                                                 (option %younger nat))))
                                                                       (pair %root
                                                                          (option nat)
                                                                          (option
                                                                             (pair (pair (option %older_auction nat) (nat %sold_tok))
                                                                                   (pair %winning_bid (address %address) (nat %kit))
                                                                                   (option %younger_auction nat)))))))
                                                             (big_map %burrow_slices
                                                                (pair address nat)
                                                                (pair (nat %oldest_slice) (nat %youngest_slice))))
                                                       (option %completed_auctions (pair (nat %oldest) (nat %youngest)))
                                                       (option %current_auction
                                                          (pair (nat %contents)
                                                                (or %state
                                                                   (pair %ascending (pair (pair (address %address) (nat %kit)) timestamp) nat)
                                                                   (pair %descending nat timestamp)))))
                                                 (nat %queued_slices))
                                              (pair %parameters
                                                 (pair (pair (pair (int %burrow_fee_index) (nat %circulating_kit))
                                                             (int %drift)
                                                             (int %drift_derivative))
                                                       (pair (int %imbalance_index) (int %index))
                                                       (timestamp %last_touched)
                                                       (nat %outstanding_kit))
                                                 (pair (int %protected_index) (int %q))
                                                 (int %target)))
                                        bytes)
                                  (pair (list operation)
                                        (pair (pair (big_map %burrows
                                                       (pair address nat)
                                                       (pair (pair (pair (bool %active) (address %address))
                                                                   (int %adjustment_index)
                                                                   (nat %collateral))
                                                             (pair (nat %collateral_at_auction) (timestamp %last_checker_timestamp))
                                                             (nat %outstanding_kit)))
                                                    (pair %cfmm
                                                       (pair (pair (nat %ctok) (nat %kit))
                                                             (pair %kit_in_ctok_in_prev_block (int %den) (int %num))
                                                             (nat %last_level))
                                                       (nat %lqt)))
                                              (pair %external_contracts
                                                 (pair (address %collateral_fa2) (address %ctez_cfmm))
                                                 (address %ctok_fa2)
                                                 (address %oracle))
                                              (pair %fa2_state
                                                 (big_map %ledger (pair nat address) nat)
                                                 (big_map %operators (pair (pair address address) nat) unit)))
                                        (pair (option %last_ctez_in_tez (pair (int %den) (int %num))) (option %last_index int))
                                        (pair %liquidation_auctions
                                           (pair (pair (pair %avl_storage
                                                          (nat %last_ptr)
                                                          (big_map %mem
                                                             nat
                                                             (or (or (pair %branch
                                                                        (pair (pair (nat %left) (nat %left_height)) (nat %left_tok) (nat %parent))
                                                                        (pair (nat %right) (nat %right_height))
                                                                        (nat %right_tok))
                                                                     (pair %leaf
                                                                        (nat %parent)
                                                                        (pair %value
                                                                           (pair (pair %contents
                                                                                    (pair (pair %burrow address nat) (option %min_kit_for_unwarranted nat))
                                                                                    (nat %tok))
                                                                                 (option %older nat))
                                                                           (option %younger nat))))
                                                                 (pair %root
                                                                    (option nat)
                                                                    (option
                                                                       (pair (pair (option %older_auction nat) (nat %sold_tok))
                                                                             (pair %winning_bid (address %address) (nat %kit))
                                                                             (option %younger_auction nat)))))))
                                                       (big_map %burrow_slices
                                                          (pair address nat)
                                                          (pair (nat %oldest_slice) (nat %youngest_slice))))
                                                 (option %completed_auctions (pair (nat %oldest) (nat %youngest)))
                                                 (option %current_auction
                                                    (pair (nat %contents)
                                                          (or %state
                                                             (pair %ascending (pair (pair (address %address) (nat %kit)) timestamp) nat)
                                                             (pair %descending nat timestamp)))))
                                           (nat %queued_slices))
                                        (pair %parameters
                                           (pair (pair (pair (int %burrow_fee_index) (nat %circulating_kit))
                                                       (int %drift)
                                                       (int %drift_derivative))
                                                 (pair (int %imbalance_index) (int %index))
                                                 (timestamp %last_touched)
                                                 (nat %outstanding_kit))
                                           (pair (int %protected_index) (int %q))
                                           (int %target)))) ;
                             IF_NONE { PUSH int 150 ; FAILWITH } {} } ;
                         SWAP ;
                         EXEC }
                       { IF_LEFT
                           { UNPAIR ;
                             MAP { DUP ;
                                   UNPAIR ;
                                   PUSH nat 1 ;
                                   DUP 3 ;
                                   COMPARE ;
                                   EQ ;
                                   PUSH nat 0 ;
                                   DUP 4 ;
                                   COMPARE ;
                                   EQ ;
                                   OR ;
                                   IF {} { PUSH string "FA2_TOKEN_UNDEFINED" ; FAILWITH } ;
                                   DUP 5 ;
                                   CAR ;
                                   CDR ;
                                   CDR ;
                                   CAR ;
                                   SWAP ;
                                   DIG 2 ;
                                   PAIR ;
                                   GET ;
                                   IF_NONE { PUSH nat 0 } {} ;
                                   SWAP ;
                                   PAIR } ;
                             SWAP ;
                             PUSH mutez 0 ;
                             DIG 2 ;
                             TRANSFER_TOKENS ;
                             SWAP ;
                             NIL operation ;
                             DIG 2 ;
                             CONS }
                           { DUP 2 ;
                             DUP 3 ;
                             CAR ;
                             DUP ;
                             CDR ;
                             DIG 4 ;
                             CAR ;
                             CDR ;
                             CDR ;
                             DIG 4 ;
                             ITER { UNPAIR ;
                                    DUG 2 ;
                                    ITER { UNPAIR 3 ;
                                           DUP 2 ;
                                           DUP 6 ;
                                           PAIR ;
                                           SENDER ;
                                           DUP 6 ;
                                           DIG 2 ;
                                           UNPAIR ;
                                           DIG 2 ;
                                           CDR ;
                                           DIG 2 ;
                                           DUP 3 ;
                                           DUP 5 ;
                                           PAIR ;
                                           PAIR ;
                                           MEM ;
                                           DUG 2 ;
                                           COMPARE ;
                                           EQ ;
                                           OR ;
                                           IF { PUSH nat 1 ;
                                                DUP 3 ;
                                                COMPARE ;
                                                EQ ;
                                                PUSH nat 0 ;
                                                DUP 4 ;
                                                COMPARE ;
                                                EQ ;
                                                OR ;
                                                IF {} { PUSH string "FA2_TOKEN_UNDEFINED" ; FAILWITH } ;
                                                DUP 4 ;
                                                CAR ;
                                                DUP 6 ;
                                                DUP 4 ;
                                                PAIR ;
                                                DUP 5 ;
                                                DUP 3 ;
                                                DUP 3 ;
                                                GET ;
                                                IF_NONE { PUSH nat 0 } {} ;
                                                SUB ;
                                                ISNAT ;
                                                IF_NONE { PUSH string "FA2_INSUFFICIENT_BALANCE" ; FAILWITH } {} ;
                                                DIG 6 ;
                                                PUSH nat 0 ;
                                                DUP 3 ;
                                                COMPARE ;
                                                EQ ;
                                                IF { SWAP ; DROP ; DUG 2 ; NONE nat ; SWAP ; UPDATE }
                                                   { DIG 3 ; DIG 2 ; DIG 3 ; SWAP ; SOME ; SWAP ; UPDATE } ;
                                                UPDATE 1 ;
                                                DUP ;
                                                CAR ;
                                                DIG 2 ;
                                                DIG 3 ;
                                                PAIR ;
                                                DIG 3 ;
                                                DUP 3 ;
                                                DUP 3 ;
                                                GET ;
                                                IF_NONE { PUSH nat 0 } {} ;
                                                ADD ;
                                                DIG 3 ;
                                                PUSH nat 0 ;
                                                DUP 3 ;
                                                COMPARE ;
                                                EQ ;
                                                IF { SWAP ; DROP ; DUG 2 ; NONE nat ; SWAP ; UPDATE }
                                                   { DIG 3 ; DIG 2 ; DIG 3 ; SWAP ; SOME ; SWAP ; UPDATE } ;
                                                UPDATE 1 }
                                              { DROP 4 ; PUSH string "FA2_NOT_OPERATOR" ; FAILWITH } } ;
                                    SWAP ;
                                    DROP } ;
                             UPDATE 2 ;
                             UPDATE 2 ;
                             UPDATE 1 ;
                             NIL operation } ;
                         PAIR } }
                   { DROP 2 ; PUSH int 135 ; FAILWITH } }
               { SWAP ;
                 DROP ;
                 IF_LEFT
                   { DROP ; PUSH int 135 ; FAILWITH }
                   { DROP ; PUSH int 135 ; FAILWITH } } ;
             UNPAIR ;
             SWAP ;
             LEFT address ;
             DIG 3 ;
             PAIR ;
             DUG 2 ;
             PAIR ;
             PAIR }
           { DUP ;
             SENDER ;
             COMPARE ;
             EQ ;
             IF { DIG 3 ;
                  IF_LEFT
                    { DIG 4 ;
                      DIG 5 ;
                      DROP 2 ;
                      IF_LEFT
                        { DROP 4 ; PUSH int 134 ; FAILWITH }
                        { UNPAIR ;
                          DIG 2 ;
                          RIGHT
                            (pair (pair (pair (big_map
                                                 (pair address nat)
                                                 (pair (pair (pair bool address) int nat) (pair nat timestamp) nat))
                                              (pair (pair (pair nat nat) (pair int int) nat) nat))
                                        (pair (pair address address) address address)
                                        (pair (big_map (pair nat address) nat) (big_map (pair (pair address address) nat) unit)))
                                  (pair (option (pair int int)) (option int))
                                  (pair (pair (pair (pair nat
                                                          (big_map
                                                             nat
                                                             (or (or (pair (pair (pair nat nat) nat nat) (pair nat nat) nat)
                                                                     (pair nat
                                                                           (pair (pair (pair (pair (pair address nat) (option nat)) nat) (option nat)) (option nat))))
                                                                 (pair (option nat) (option (pair (pair (option nat) nat) (pair address nat) (option nat)))))))
                                                    (big_map (pair address nat) (pair nat nat)))
                                              (option (pair nat nat))
                                              (option (pair nat (or (pair (pair (pair address nat) timestamp) nat) (pair nat timestamp)))))
                                        nat)
                                  (pair (pair (pair (pair int nat) int int) (pair int int) timestamp nat) (pair int int) int)) ;
                          DIG 4 ;
                          PAIR ;
                          DUP 4 ;
                          DUP 3 ;
                          GET ;
                          IF_NONE
                            { DUG 3 ; SWAP ; SOME ; SWAP ; UPDATE }
                            { DIG 4 ; DIG 4 ; DIG 2 ; CONCAT ; DIG 3 ; SWAP ; SOME ; SWAP ; UPDATE } ;
                          NIL operation ;
                          PAIR ;
                          PAIR } }
                    { IF_LEFT
                        { DIG 4 ;
                          DIG 5 ;
                          DROP 2 ;
                          SWAP ;
                          RIGHT
                            (pair (pair (pair (big_map
                                                 (pair address nat)
                                                 (pair (pair (pair bool address) int nat) (pair nat timestamp) nat))
                                              (pair (pair (pair nat nat) (pair int int) nat) nat))
                                        (pair (pair address address) address address)
                                        (pair (big_map (pair nat address) nat) (big_map (pair (pair address address) nat) unit)))
                                  (pair (option (pair int int)) (option int))
                                  (pair (pair (pair (pair nat
                                                          (big_map
                                                             nat
                                                             (or (or (pair (pair (pair nat nat) nat nat) (pair nat nat) nat)
                                                                     (pair nat
                                                                           (pair (pair (pair (pair (pair address nat) (option nat)) nat) (option nat)) (option nat))))
                                                                 (pair (option nat) (option (pair (pair (option nat) nat) (pair address nat) (option nat)))))))
                                                    (big_map (pair address nat) (pair nat nat)))
                                              (option (pair nat nat))
                                              (option (pair nat (or (pair (pair (pair address nat) timestamp) nat) (pair nat timestamp)))))
                                        nat)
                                  (pair (pair (pair (pair int nat) int int) (pair int int) timestamp nat) (pair int int) int)) ;
                          DUP 4 ;
                          PUSH string "m" ;
                          GET ;
                          IF_NONE
                            { DIG 3 ; DIG 2 ; SOME ; PUSH string "m" ; UPDATE }
                            { DIG 4 ; DIG 3 ; DIG 2 ; CONCAT ; SOME ; PUSH string "m" ; UPDATE } ;
                          PAIR ;
                          SWAP ;
                          NIL operation }
                        { SWAP ;
                          DROP ;
                          DUP ;
                          CDR ;
                          CDR ;
                          CONTRACT %getPrice (contract (pair nat nat)) ;
                          IF_NONE { PUSH int 113 ; FAILWITH } { DROP } ;
                          DUP ;
                          CAR ;
                          CAR ;
                          CONTRACT %transfer
                            (list (pair (address %from_) (list %txs (pair (address %to_) (nat %token_id) (nat %amount))))) ;
                          IF_NONE { PUSH int 115 ; FAILWITH } { DROP } ;
                          DUP ;
                          CDR ;
                          CAR ;
                          CONTRACT %transfer
                            (list (pair (address %from_) (list %txs (pair (address %to_) (nat %token_id) (nat %amount))))) ;
                          IF_NONE { PUSH int 115 ; FAILWITH } { DROP } ;
                          DUP ;
                          CAR ;
                          CDR ;
                          CONTRACT %getMarginalPrice (contract (pair nat nat)) ;
                          IF_NONE { PUSH int 116 ; FAILWITH } { DROP } ;
                          SELF_ADDRESS ;
                          CONTRACT %touch unit ;
                          IF_NONE
                            { PUSH int -4 ; FAILWITH }
                            { PUSH mutez 0 ; UNIT ; TRANSFER_TOKENS } ;
                          DIG 4 ;
                          DIG 5 ;
                          UNPAIR ;
                          SWAP ;
                          NONE (pair nat (or (pair (pair (pair address nat) timestamp) nat) (pair nat timestamp))) ;
                          NONE (pair nat nat) ;
                          PAIR ;
                          EMPTY_BIG_MAP (pair address nat) (pair nat nat) ;
                          DIG 3 ;
                          PAIR ;
                          PAIR ;
                          PAIR ;
                          PAIR ;
                          NONE int ;
                          NONE (pair int int) ;
                          PAIR ;
                          PAIR ;
                          EMPTY_BIG_MAP (pair (pair address address) nat) unit ;
                          EMPTY_BIG_MAP (pair nat address) nat ;
                          PAIR ;
                          DIG 3 ;
                          PAIR ;
                          PUSH nat 1 ;
                          LEVEL ;
                          PUSH int 1 ;
                          PUSH int 1 ;
                          PAIR ;
                          PAIR ;
                          PUSH nat 1 ;
                          PUSH nat 1 ;
                          PAIR ;
                          PAIR ;
                          PAIR ;
                          EMPTY_BIG_MAP
                            (pair address nat)
                            (pair (pair (pair bool address) int nat) (pair nat timestamp) nat) ;
                          PAIR ;
                          PAIR ;
                          PAIR ;
                          LEFT address ;
                          DIG 3 ;
                          PUSH bytes 0x74657a6f732d73746f726167653a6d ;
                          SOME ;
                          PUSH string "" ;
                          UPDATE ;
                          PAIR ;
                          DIG 2 ;
                          NIL operation ;
                          DIG 3 ;
                          CONS } ;
                      PAIR ;
                      PAIR } }
                { DROP 6 ; PUSH int 111 ; FAILWITH } } ;
         UNPAIR ;
         UNPAIR ;
         DIG 2 ;
         UNPAIR ;
         DIG 3 ;
         PAIR 3 ;
         SWAP ;
         PAIR } }

